Etapas de Git:
    Computadora --> Son los archivos que estamos trabajando en la computadora.
    Estage --> Es la etapa en la que queremos verificar los cambios queremos tener. Se puede regresar los cambios hechos.
    Commit --> Etapa en la que los archivos están comprometidos.
    Server --> Última etapa, los cambios en los que ya están en el servidor.


* pwd -----------------------------------> Para ver la ruta en la que estoy.
* cd ------------------------------------> Para moverme en las carpetas.
* cd .. ---------------------------------> Para regresar a la carpeta anterior.
* mkdir ---------------------------------> Crear una nueva carpeta.
* clear ---------------------------------> Limpiar la terminal.
* ls ------------------------------------> Muestra un listado de la ruta.
* ls -a ---------------------------------> Muestra un listado completo de la ruta. (Incluyendo los archivos ocultos)
* git init ------------------------------> Para inicializar la carpeta con Git.
* code . --------------------------------> Abre el editor de texto configurado como predeterminado. (VS Code)
* git status ----------------------------> Mostrar estado actual del repositorio.
* git add <Nombre archivo> --------------> Agregar el archivo al commit.
* git add <extension> -------------------> Agrega todos los archivos con esa extension al commit.
* git add . -----------------------------> Agrega todos los archivos. (Es mala práctica)
* git add <Nombre archivo> <Archivo2> ---> Para agregar más de 2 archivos. (Deben estar separados por un espacio)
* git commit -m "Mensaje" ---------------> Para comprometer los archvios.
* rm <Nombre Archivo> -------------------> Sirve para eliminar el archivo.
* git retore --staged <Nombre archivo> --> Para recuperar el archivo que habías borrado (Pero que aun no se ha comprometido).
* mv <Nombre Archvio> <Nombre Nuevo> ----> Renombrar archivos.
.ignore ---------------------------------> El archivo ignora archivos o carpetas que tiene escritos para que no se puedan commitear.
* git status -s -------------------------> Una forma mejor para obtener los detalles.
* git diff ------------------------------> Te muestra el contenido que esta cambiando.
* git diff --staged ---------------------> Te muestra el contenido que esta en el Estaged.
* q -------------------------------------> Para salir de la interfaz que te muestra git diff.
* git log -------------------------------> Sirve para ver toda la información del historial de los cambios.
* git log --oneline ---------------------> Muestra los mensajes de los commit hechos.
* git branch ----------------------------> Te muestra las ramas que existen y en la que se está trabajando.
* git branch -r -------------------------> Te muestra las ramas que existen en el repositorio y en la que se está trabajando.
* git branch <Nombre_Rama> --------------> Crear una rama con ese nombre.
* git show-branch -----------------------> Obtener información más detallada de la rama.
* git checkout <Nombre_Rama> ------------> Para cambiarte de rama.
* git checkout -b <Nombre_Rama> ---------> Para crear una rama y te mueve a esa rama. (En un solo comando)
* git merge <Nombre_Rama> ---------------> Para unir los cambios de la rama secundaria. (Ésto siempre lo tienes que hacer en la rama master/main)
* git merge <Nombre_Rama> -m 'Mensaje' --> Para unir los cambios de la rama secundaria. (Con un mensaje)
* git merge master -m 'Mensaje' ----------> Para unir los cambios de la rama master a la secundaria. (Se debe estar en la rama secundaria)
* git clone <url> -----------------------> Para descargar repo a la computadora.
* git fetch -----------------------------> Descarga los archivos nuevos que están en la repo pero aún no los actualiza en local. (Sólo los deja listos para que actualices)
* git fetch <url> -----------------------> Descarga los archivos nuevos solo de la repo especificada.
* git fetch <url-Repo> <url_Rama> -------> Descarga los archivos nuevos solo de la repo especificada y de su rama especificada.
* git fetch --all -----------------------> Desscarga todos los repositorios remotos registrados y sus ramas.
* git fetch --dry-run -------------------> Ejecuta una demo del comando. Genera ejemplos de acciones que realizará pero no los aplica.
* git pull ------------------------------> Actualiza los archivos en el directorio local, para que puedas modifiscarlos y verlos en tu pc.
* git push ------------------------------> Después de commitear, poner éste comando, para actualizar los cambios en la repo.
* git push -u origin master -------------> Para subir archivo a GitHub.
* git push -u origin <Nombre_Rama> ------> Para subir los cambios a la rama especificada.
* git remote add origin <url> -----------> Para indicar en que repositorio se debe subir.
* git branch -d <Nombre_Rama> -----------> Para borrar una rama local.
* git branch -D <Nombre_Rama> -----------> para forzar a borrar una rama local aunque no se hayan guardado cambios, etc.
* git push origin --delete <Nom_Rama> ---> Para borrar una rama remota
* npm install --save-dev gh-pages -------> Para instalar en la compu el GitHub Pages.
* cat <Nombre del archivo> --------------> Muestra el contenido del archivo.
* exit ----------------------------------> Salir de la terminal.